<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leo&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/0204405386889fbe185872402e1ca5ab</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-17T15:28:25.449Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Leo guo</name>
    <email>leo@vofac.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unity摄像机截图功能</title>
    <link href="http://yoursite.com/2018/04/16/Unity%E6%91%84%E5%83%8F%E6%9C%BA%E6%88%AA%E5%9B%BE%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2018/04/16/Unity摄像机截图功能/</id>
    <published>2018-04-16T13:28:18.000Z</published>
    <updated>2018-04-17T15:28:25.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unity摄像机截图功能"><a href="#Unity摄像机截图功能" class="headerlink" title="Unity摄像机截图功能"></a>Unity摄像机截图功能</h1><p>最近项目用到了这个功能来截取角色头像信息当做头像的功能，所以在此记录一笔，方便以后查阅。</p><p>也是查找了对应的某些帖子，发现Unity截图功能其实有两种。</p><a id="more"></a><ol><li><p>利用函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Application.CaptureScreenshot();</span><br></pre></td></tr></table></figure><p>但是这个函数就是所谓的截屏功能，但是性价比不高，而且在手机端的效率实在不怎么样，并且也不是很灵活，所以项目中不推荐使用。</p><p>​</p></li><li><p>利用Camera渲染到RenderTexture上后，再由RenderTexture写入到Texture上来使用。</p><p>这种方式比较灵活，而且可以截取特定摄像机下所拍摄的物体，效率也还不错，唯一不好的一点就是占内存，所以可以适当对所截取的图片进行贴图压缩来节省内存，并且在截图过后要把RenderTexture删除。不建议经常截图，只在需要截图时使用，然后将截取的贴图缓存或者写入文件中，待需要使用时使用这种做法比价稳妥。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">using System.IO;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class CameraGraber : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    [SerializeField] private Camera m_camera;</span><br><span class="line">    [SerializeField] private Rect m_rect;</span><br><span class="line">    [SerializeField] private TextureFormat m_format;</span><br><span class="line"></span><br><span class="line">    private Texture2D m_texture;</span><br><span class="line">    public Texture2D Texture</span><br><span class="line">    &#123;</span><br><span class="line">        get &#123; return m_texture; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Sprite Sprite</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            return Sprite.Create(Texture, m_rect, Vector2.zero);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private void GrabCameraTexture()</span><br><span class="line">    &#123;</span><br><span class="line">        //生成RenderTexture，并赋值给摄像机</span><br><span class="line">        RenderTexture rt = new RenderTexture((int) m_rect.width, (int) m_rect.height, 32);</span><br><span class="line">        m_camera.targetTexture = rt;</span><br><span class="line">        //渲染摄像机</span><br><span class="line">        m_camera.Render();</span><br><span class="line">        //所有的渲染都会被写入到这个RenderTexture上</span><br><span class="line">        RenderTexture.active = rt;</span><br><span class="line">        //生成贴图</span><br><span class="line">        m_texture = new Texture2D((int)m_rect.width, (int)m_rect.height, m_format, false);</span><br><span class="line">        //截取像素点</span><br><span class="line">        m_texture.ReadPixels(m_rect, 0, 0);</span><br><span class="line">        //重置Alpha通道</span><br><span class="line">        m_texture = ResetAlpha(m_texture);</span><br><span class="line">        //提交</span><br><span class="line">        m_texture.Apply();</span><br><span class="line">        //清除数据</span><br><span class="line">        m_camera.targetTexture = null;</span><br><span class="line">        RenderTexture.active = null;</span><br><span class="line">        GameObject.Destroy(rt);</span><br><span class="line">        rt = null;</span><br><span class="line"></span><br><span class="line">        //保存图片到Application.dataPath目录下</span><br><span class="line">        SaveTextureToPNG(m_texture);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //重置Alpha通道</span><br><span class="line">    private Texture2D ResetAlpha(Texture2D texture)</span><br><span class="line">    &#123;</span><br><span class="line">        if (texture != null)</span><br><span class="line">        &#123;</span><br><span class="line">            for (int i = 0; i &lt; texture.width; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                for (int j = 0; j &lt; texture.height; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Color color = texture.GetPixel(i, j);</span><br><span class="line">                    color.a = (color.a &lt; 0.1f) ? 0f : 1f;</span><br><span class="line">                    texture.SetPixel(i, j, color);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        return texture;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //保存图片到Application.dataPath目录下</span><br><span class="line">    private void SaveTextureToPNG(Texture2D texture)</span><br><span class="line">    &#123;</span><br><span class="line">        byte[] bytes = texture.EncodeToPNG();</span><br><span class="line">        string filename = Application.dataPath + &quot;/CameraGrabTexture1.png&quot;;</span><br><span class="line">        File.WriteAllBytes(filename, bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void OnGUI()</span><br><span class="line">    &#123;</span><br><span class="line">        if (GUI.Button(new Rect(0f, 0f, 200f, 200f), &quot;GrabTexture&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            GrabCameraTexture();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>看到这里估计会有人对<code>ResetAlpha()</code>函数不理解，因为项目中遇到了一个诡异的问题，在截取角色信息时如果截取的为带Alpha通道的模型贴图（但是模型本身并不透明）时，截取的贴图的Alpha通道竟然不为1，会与背景混合造成显示异常的情况。所以我就对截取的像素贴图进行Alpha通道的处理。如果遇到这个问题的可以尝试用这种方式。当然如果有大神有更为妥当的处理方式欢迎联系我，我们一起讨论。</p><p>这里多说一句，摄像机的Clear Flags要选择为Depth only或者Solid Color，如果是天空盒那种是不会截取到的。</p><p>另外如果想要带透明度的贴图只需将贴图的格式修改为带透明度的贴图格式即可。</p><p>效果如下：</p><p><img src="/images/UnityGraber/1.png" alt="1"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unity摄像机截图功能&quot;&gt;&lt;a href=&quot;#Unity摄像机截图功能&quot; class=&quot;headerlink&quot; title=&quot;Unity摄像机截图功能&quot;&gt;&lt;/a&gt;Unity摄像机截图功能&lt;/h1&gt;&lt;p&gt;最近项目用到了这个功能来截取角色头像信息当做头像的功能，所以在此记录一笔，方便以后查阅。&lt;/p&gt;
&lt;p&gt;也是查找了对应的某些帖子，发现Unity截图功能其实有两种。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>个人博客搭建</title>
    <link href="http://yoursite.com/2018/04/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/04/14/个人博客搭建/</id>
    <published>2018-04-14T09:04:51.000Z</published>
    <updated>2018-04-15T13:32:42.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人博客搭建"><a href="#个人博客搭建" class="headerlink" title="个人博客搭建"></a>个人博客搭建</h1><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>​    第一篇文章写下自己这个博客的搭建过程吧。在搭建的过程中也遇到了不少坑，所以记录这一过程。个人博客地址：<a href="https://leoguoex.github.io/" target="_blank" rel="noopener">https://leoguoex.github.io/</a>，本博客采用的博客搭建方式是：Hexo + GitHub Pages。这里主要也讲述的是这种方式的博客搭建。</p><a id="more"></a><h3 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h3><h4 id="Node-js-环境搭建："><a href="#Node-js-环境搭建：" class="headerlink" title="Node.js 环境搭建："></a>Node.js 环境搭建：</h4><p><strong>简介：</strong> <strong>Node.js</strong>是一个能够在服务器端运行的开源，跨平台的JavaScript运行环境。<strong>Node.js</strong>采用Google开发的运行代码，使用高效、轻量级的事件驱动、非阻塞I/O模型等提高性能。</p><p><strong>步骤：</strong></p><ul><li><p>在Node.js 官网：<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/</a>下载对应的Node.js安装包，并安装。</p></li><li><p>在安装完成后，需要验证Node.js是否安装成功。打开命令提示符，分别输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>如图：</p></li></ul><p><img src="/images/OwnBlogBuild/1.png" alt="1"></p><p>​    这样就表示安装完成了，可以看到对应的版本号。</p><h4 id="Git环境搭建："><a href="#Git环境搭建：" class="headerlink" title="Git环境搭建："></a>Git环境搭建：</h4><p><strong>简介：</strong>分布式版本控制软件</p><p><strong>步骤</strong>：</p><ul><li><p>在Git官网：<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a>,下载Git安装包，并安装。</p></li><li><p>在安装完成后，需要验证Git是否安装成功，与Node.js验证方式相同，在命令提示符中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git version</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/images/OwnBlogBuild/3.png" alt="3"></p></li></ul><p>这样就表示安装完成了。</p><h4 id="注册GitHub："><a href="#注册GitHub：" class="headerlink" title="注册GitHub："></a>注册GitHub：</h4><p><strong>简介：</strong>一个基于Git的代码托管平台。</p><p><strong>步骤：</strong></p><p>​    这里就不再赘述了，网上教程比较多。参考网站：</p><p>​    <a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener">http://rogerdudler.github.io/git-guide/index.zh.html</a></p><p>​    <a href="http://www.runoob.com/w3cnote/git-guide.html" target="_blank" rel="noopener">http://www.runoob.com/w3cnote/git-guide.html</a>,</p><p>​    照着做就好了。</p><p>以上就是所有的需要准备的环境了，到这里，除了Hexo以及需要使用的主题外，其余的均已安装完毕。</p><h3 id="个人博客搭建："><a href="#个人博客搭建：" class="headerlink" title="个人博客搭建："></a>个人博客搭建：</h3><p>接下来开始个人博客搭建了。</p><h4 id="GitHub-Pages："><a href="#GitHub-Pages：" class="headerlink" title="GitHub Pages："></a>GitHub Pages：</h4><p><strong>简介</strong>：GitHub Pages是一个面向用户、组织和项目开放的公共静态页面的搭建托管服务，站点可以被免费在GitHub上托管，你可以免费试用GitHub默认提供的域名github.io发布站点供人访问，当然你也可以通过自定义域名来实现。网站在这里<a href="https://pages.github.com/" target="_blank" rel="noopener">https://pages.github.com/</a></p><p><strong>步骤：</strong></p><ul><li>在你之前创建的GitHub账号下，创建一个库。点击Start a project，如图：</li></ul><p><img src="/images/OwnBlogBuild/4.png" alt="4"></p><p>​    创建一个新库,这里如图所示，库名称就是你的账号对应的<code>用户名+.github.io</code>（如:你的username为<code>111</code>，                                                                     那么你的库名就为<code>111.github.io</code>） </p><p>​    <em><font color="red">注意：里是GitHub Pages的规定，一定要如此命名才可发布您的站点。</font></em></p><p><img src="/images/OwnBlogBuild/5.png" alt="5"></p><p>创建新库后，就可以在浏览器中输入你创建的个人博客页面的地址<code>username.github.io</code>,可以正常访问后，表示Github Pages创建成功。</p><ul><li><p>下面为了更好地让你在本地对库进行编辑需要将库clone到本地，使用GitHub Desktop和命令行都可以。</p><ul><li><p>GitHub Desktop</p><p>下载GitHub Desktop(<a href="https://desktop.github.com/" target="_blank" rel="noopener">https://desktop.github.com/</a>),下载完成后进行安装，运行，打开后选择File-&gt;Clone Repository，选好对应的库，选好要Clone的路径后，点击Clone即可。</p><p><img src="/images/OwnBlogBuild/6.png" alt="6"></p></li><li><p>命令行</p><p>找到你想Clone工程的目录下，右键选择Git Bash Here，</p><p><img src="/images/OwnBlogBuild/7.png" alt="7"></p><p>在弹出的界面中输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:username/username.github.io</span><br></pre></td></tr></table></figure><p>（这里的username依旧是你的账号名）,然后等待，在看到</p><p><code>Receiving objects：100% （3/3） ，done</code>后表示Clone完成，接下来就可以在目录中看到Clone下来的库了。这就是你需要安装Hexo的目录。</p><p>​</p></li></ul></li></ul><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo:"></a>安装Hexo:</h4><p><strong>简介：</strong>hexo是一个简单、快速、强大的Node.js静态博客框架，文档在这里<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/index.html</a>，这里写的很详细。</p><p><strong>步骤：</strong></p><ul><li><p>进入之前Clone的库所在的文件夹目录</p></li><li><p>使用npm安装Hexo， 在命令行中输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>然后等待安装完成…</p></li><li><p>通过在命令行中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><p><img src="/images/OwnBlogBuild/8.png" alt="523755993(1"></p></li></ul><p>​    这样就表示安装完成了。</p><h4 id="Hexo使用"><a href="#Hexo使用" class="headerlink" title="Hexo使用:"></a>Hexo使用:</h4><p><strong>步骤：</strong></p><ul><li><p>在刚才Clone的GitHub Pages库中使用命令行。</p><ol><li>通过cd命令进入到工程目录。</li><li>进入之前Clone库目录，右键选择Git Bash Here。</li></ol></li><li><p>在命令行中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo init username.github.io</span><br></pre></td></tr></table></figure><p>可以看到，目录下已经有了一个命名为<code>username.github.io</code>的新的文件夹</p></li><li><p>输入<code>cd username.github.io</code>,进入生成的Hexo工程目录</p></li><li><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br><span class="line">或者</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>运行本地Hexo服务</p><p><img src="/images/OwnBlogBuild/9.png" alt="9"></p><p>​</p><p><em><font color="red">注意:如果提示找不到该指令，就通过输入</font></em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-server</span><br><span class="line">或者</span><br><span class="line">npm install hexo -server --save</span><br></pre></td></tr></table></figure><p><em><font color="red">安装后再进行测试。</font></em></p></li><li><p>在浏览器中访问<code>http://localhost:4000/</code>,可以看到</p><p><img src="/images/OwnBlogBuild/10.png" alt=""></p></li></ul><p>表示本地服务已经启动成功，Hexo可以正常运行，我们在平时发布的过程中可以通过这个命令来调试自己的Blog，当显示完成时就可以通过命令来发布到Github Pages上供外界访问了。</p><h4 id="Hexo-关联-Github-Pages"><a href="#Hexo-关联-Github-Pages" class="headerlink" title="Hexo 关联 Github Pages:"></a>Hexo 关联 Github Pages:</h4><p><strong>步骤：</strong></p><ul><li><p>打开安装Hexo工程的目录，并打开<code>_config.yml</code>，该文件是站点配置。</p><p>在该文件中找到Deployment选项，开始配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:username/username.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ul><li>type 配置为 git</li><li>repo 配置为 你之前创建的库地址</li><li>branch 为你想要显示的分支，默认为master</li></ul><p><em><font color="red">注意:配置格式冒号后面要加空格，否则配置会报异常</font></em></p><p>配置完成后保存文件退出。</p></li><li><p>将本地文件提交到GitHub Pages输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean    //删除旧的public文件</span><br><span class="line">hexo g//生成新的public</span><br><span class="line">hexo d     //开始部署</span><br></pre></td></tr></table></figure><p>如果上面的命令不成功，则需要安装<code>hexo-deployer-git</code>扩展<code>npm install hexo-deployer-git --save</code>,然后再运行上述命令。</p><p>经过一段时间的等待后，可以看到提示<code>INFO  Deploy done: git</code>，表示部署成功，接下来可以访问你自己的Github Pages（<code>username.github.io</code>），而不是本地的地址了，接下来就可以看到Hexo和GitHub Pages已经成功关联了。</p></li></ul><h4 id="修改Hexo主题："><a href="#修改Hexo主题：" class="headerlink" title="修改Hexo主题："></a>修改Hexo主题：</h4><p>Hexo有许多主题可供选择，官方的主题在这里：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a>，可以选择你喜欢的主题，并进行Clone。这里用Next主题举例</p><p>官网在这里：<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a></p><p>文档在这里：<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a></p><p><strong>步骤：</strong></p><ul><li>定位到Hexo站点目录下，输入：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><ul><li>在Clone下后，打开站点配置<code>_config.yml</code>，找到theme</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: landscape</span><br></pre></td></tr></table></figure><p>将<code>landscape</code> 修改为 <code>next</code>后进行Hexo部署到GitHub Pages操作后，就可以看到自己的GitHub Pages已经被修改为Next主题了，当然也可以通过Hexo进行本地验证。</p><ul><li>设置站点语言，打开站点配置，找到</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language:</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure><p>当然Next也支持多语言，如下表格所示：</p><table><thead><tr><th>语言</th><th>代码</th><th>设定示例</th></tr></thead><tbody><tr><td>English</td><td><code>en</code></td><td><code>language: en</code></td></tr><tr><td>简体中文</td><td><code>zh-Hans</code></td><td><code>language: zh-Hans</code></td></tr><tr><td>Français</td><td><code>fr-FR</code></td><td><code>language: fr-FR</code></td></tr><tr><td>Português</td><td><code>pt</code></td><td><code>language: pt</code> or <code>language: pt-BR</code></td></tr><tr><td>繁體中文</td><td><code>zh-hk</code> 或者 <code>zh-tw</code></td><td><code>language: zh-hk</code></td></tr><tr><td>Русский язык</td><td><code>ru</code></td><td><code>language: ru</code></td></tr><tr><td>Deutsch</td><td><code>de</code></td><td><code>language: de</code></td></tr><tr><td>日本語</td><td><code>ja</code></td><td><code>language: ja</code></td></tr><tr><td>Indonesian</td><td><code>id</code></td><td><code>language: id</code></td></tr><tr><td>Korean</td><td><code>ko</code></td><td><code>language: ko</code></td></tr></tbody></table><p>可根据需求配置。</p><h3 id="发布文章："><a href="#发布文章：" class="headerlink" title="发布文章："></a>发布文章：</h3><p>到这里其实我们的博客搭建已经完成，剩下的就是需要发布博客文章了。</p><p>一般写文章使用的是Markdown编辑器，市面上也有很多Markdown编辑器，大家可以选择自己习惯的编辑器使用，个人使用Typora。</p><p>推荐列表在这里：</p><p><a href="https://github.com/wizardforcel/markdown-simple-world/blob/master/1.md" target="_blank" rel="noopener">https://github.com/wizardforcel/markdown-simple-world/blob/master/1.md</a></p><p>如果不太明白Markdown语法也别太担心，这里有教程~~：</p><p><a href="https://github.com/wizardforcel/markdown-simple-world/blob/master/1.md" target="_blank" rel="noopener">https://github.com/wizardforcel/markdown-simple-world/blob/master/1.md</a></p><p>在有了顺手的Markdown编辑器和掌握列Markdown语法以后，来我们就要创建文章了。</p><ul><li><p>在Hexo工程目录中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;text&quot;          #这里的text是文件名</span><br></pre></td></tr></table></figure><p>输入后我们看到如下字样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;test&quot;</span><br><span class="line">INFO  Created: username.github.io\source\_posts\test.md</span><br></pre></td></tr></table></figure><p>我们可以看到，Hexo在它工程目录中的<code>source\_posts\</code>创建了一个test.md的文件</p></li><li><p>我们只需打开这个Markdown文件开始编写自己的博客就好了。</p></li></ul><p>剩下更多的Hexo语法请查阅Hexo文档，这里就不再赘述了。</p><h3 id="结束语："><a href="#结束语：" class="headerlink" title="结束语："></a>结束语：</h3><p>​    到此个人博客的搭建过程就已经完毕了，当然这只是起步，还有很多扩展和功能没有添加。未来如果有新东西添加，到时候我也会写在这里,希望能够帮助各位。</p><p>​    ps:毕竟个人并不是专业的web开发，如果有不对、不清楚的地方或者一些建议，请私信我，我会及时做处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;个人博客搭建&quot;&gt;&lt;a href=&quot;#个人博客搭建&quot; class=&quot;headerlink&quot; title=&quot;个人博客搭建&quot;&gt;&lt;/a&gt;个人博客搭建&lt;/h1&gt;&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;​    第一篇文章写下自己这个博客的搭建过程吧。在搭建的过程中也遇到了不少坑，所以记录这一过程。个人博客地址：&lt;a href=&quot;https://leoguoex.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leoguoex.github.io/&lt;/a&gt;，本博客采用的博客搭建方式是：Hexo + GitHub Pages。这里主要也讲述的是这种方式的博客搭建。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前言</title>
    <link href="http://yoursite.com/2018/04/14/%E5%89%8D%E8%A8%80/"/>
    <id>http://yoursite.com/2018/04/14/前言/</id>
    <published>2018-04-14T08:31:05.000Z</published>
    <updated>2018-04-14T08:58:54.974Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言：</strong>一直都想搭建一个个人博客，目的如下：</p><ul><li>记录自己平时学习生活中情况。</li><li>通过写博客养成经常总结反思的习惯。</li><li>记录自己在平时工作和生活中遇到的坑，对下次遇到类似的问题有个查阅，并且如果有幸能够帮助别人绕过这些坑，节约他们的时间也是一件开心事。</li><li>创造一个能够和外界交流的平台，让自己Open起来，可以通过交流更好的自我提高。</li><li>提高自己的写作能力和交流能力。</li></ul><p><strong>关于我：</strong></p><ul><li>职业：Unity3D开发工程师    （程序猿T.T）</li><li>爱好：游戏开发，python爬虫，像素画</li></ul><p><strong>关于内容：</strong></p><ul><li>Unity3D总结</li><li>游戏开发内容总结</li><li>Python相关内容总结</li><li>像素画分享（有可能的话）</li></ul><p><em>Tips：不管身处何处，都要不断学习和反思，让知识变成工具，让经历变成经验，不断前行，Keep Learning！</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;一直都想搭建一个个人博客，目的如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录自己平时学习生活中情况。&lt;/li&gt;
&lt;li&gt;通过写博客养成经常总结反思的习惯。&lt;/li&gt;
&lt;li&gt;记录自己在平时工作和生活中遇到的坑，对下次遇到类似的问题有个查阅，并
      
    
    </summary>
    
    
  </entry>
  
</feed>
